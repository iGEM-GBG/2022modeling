n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, lambda = r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
rpois(1, r)
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
rpois(1, r)
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
# Simulate the branching process
m <- 5 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
sumExt/n # probability of extinction estimated by simulating branching processes
# Simulate the branching process
m <- 50 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
# Simulate the branching process
m <- 10 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
sumExt/n # probability of extinction estimated by simulating branching processes
# Simulate the branching process
m <- 20 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
# Simulate the branching process
m <- 20 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
sumExt/n # probability of extinction estimated by simulating branching processes
# Simulate the branching process
m <- 50 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
# e)
probExt(1)^7
sumExt/n # probability of extinction estimated by simulating branching processes
# Simulate the branching process
m <- 5 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
sumExt/n # probability of extinction estimated by simulating branching processes
# Simulate the branching process
m <- 10 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
sumExt/n # probability of extinction estimated by simulating branching processes
# Simulate the branching process
m <- 15 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
sumExt/n # probability of extinction estimated by simulating branching processes
# Simulate the branching process
m <- 20 # number of simulated generations
n <- 200 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
sumExt/n # probability of extinction estimated by simulating branching processes
# Simulate the branching process
m <- 17 # number of simulated generations
n <- 300 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
sumExt/n # probability of extinction estimated by simulating branching processes
# Simulate the branching process
m <- 20 # number of simulated generations
n <- 300 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
for(j in 1:n){
r <- rgamma(1,15,15)
sumExt = sumExt + extinctionSim(7, 0, r)
}
# Simulate the branching process
m <- 20 # number of simulated generations
n <- 300 # number of simulations
extinctionSim <- function(o, gen, r) { # o: #offsprings, gen: current generation
if(gen > m) {
return(0) # no extinction has occupied in m generations
}
s <- 0 # sum of simulated offsprings
for(i in 1:o){
s = s + rpois(1, r) # generate poisson(lambda) distributed offsprings
}
if(s == 0){
return(1) # extinction has occurred
}
else {
return(extinctionSim(s, gen+1, r))
}
}
sumExt <- 0 # number of simulations in which extinction occurs
r <- rgamma(n,15,15)
for(j in 1:n){
sumExt = sumExt + extinctionSim(7, 0, r[j])
}
3+7
3+7
a <- log(10); b <- 5+7
sqrt(a)
a <- a + 3
x <- c(4, 5, 6, 7)
z <- c(x, 3, 5)
seq(1, 100, 9)
seq(to=100, from=1, by=9) # samma
seq(f=1, t=100, length.out=10)
1:3
3:1
rep(c(1,2,3), times=3)
rep(1:3, each=4)
rep(1:3, t=3, e=4)
variable <- rep(1:3, length.out=20)
myvalues <- 21:30
myvalues
myvalues[1]
myvalues[c(1, 3, 5)]
myvalues[1:3]
myvalues[-1] # All elements except the first element
myvalues[-c(1, 3, 5)]
myvalues[-(2:4)]
x <- rnorm(20, 50, 1)
x
mean(x)
var(x)
sd(x)
median(x)
boxplot(x)
boxplot(x, horizontal=TRUE)
hist(x)
rubbish <- c(1, 19, 23.4)
ls()
rm(rubbish) # Or remove(rubbish)
ls()
x <- numeric(3)
x[c(2,6)] <- c(7,2)
x
nymat <- matrix(NA,nrow=2,ncol=3) # matrix with 2 rows and 3 columns
# NA = Not Available
nymat
nymat[1,1] <- 3
nymat
A <- matrix(c(2,3,-2,1,2,2),3,2)
A
B <- matrix(c(2,-2,1,2,3,1),2,3)
B
A%*%B
for(i in 1:3){
nymat[1,i] <- runif(1) # random number within (0,1)
}
nymat
summary(nymat) # Writes a lot of detales about an object
nymat[2,1:3] <- runif(3,2,5) # 3 random numbers within (2,5)
nymat
set.seed(1)
runif(3)
runif(3)
set.seed(2)  # Siffran måste vara samma för att runif ska ge samma random
runif(3)
runif(3)
Vectorize(func) # Function can now handle a vector of variables
runif(3)
for (i in 0:4){
prob = prob + (exp(-36*3/25)*(36*3/25)^(4-i)/gamma(4-i+1))^2 *
exp(-36/25)*(36/25)^i /gamma(i+1)
}
prob
# c)
lambda = 36
n = rpois(1, lambda*1) # simulate number of trees
x = runif(n, 0, 1)
y = runif(n, 0, 1)
plot(x,y, pch = 2)
n = rpois(1, lambda*1) # simulate number of trees
x = runif(n, 0, 1)
y = runif(n, 0, 1)
plot(x,y, pch = 2)
n = rpois(1, lambda*1) # simulate number of trees
x = runif(n, 0, 1)
n = rpois(1, lambda*1) # simulate number of trees
n = rpois(1, lambda*1) # simulate number of trees
shiny::runApp('Documents/GitHub/2022modeling/WebApp')
runApp('Documents/GitHub/2022modeling/WebApp')
runApp(display.mode = "showcase")
setwd("~/Documents/GitHub/2022modeling/WebApp")
runApp(display.mode = "showcase")
runApp()
runApp('~/Documents/GitHub/2022modeling/WebAppTests/Untitled.R')
runApp('~/Documents/GitHub/2022modeling/WebAppTests/Untitled.R')
setwd("~/Documents/GitHub/2022modeling/WebAppTests")
runApp()
setwd("~/Documents/GitHub/2022modeling/WebAppTests")
runApp()
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp()
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
library(maps)
library(mapproj)
source("helpers.R")
source("/helpers.R")
ls()
source("/helpers.R")
setwd("~/Documents/GitHub/2022modeling/WebApp")
source("/helpers.R")
source(".helpers.R")
source("helpers.R")
counties <- readRDS("census-app/data/counties.rds")
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
runApp()
runApp()
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
runApp()
counties <- readRDS("data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
percent_map(counties$white, "darkgreen", "% White", max = 20, min = 80)
percent_map(counties$white, "darkgreen", "% White", max = 0, min = 80)
percent_map(counties$white, "darkgreen", legend.title = "% White", max = 0, min = 80)
percent_map(counties$white, "darkgreen", legend.title = "% White", min = 0, max = 80)
runApp()
runApp()
setwd("~/Documents/GitHub/2022modeling/WebAppTests")
runApp()
runApp("stockVis")
install.packages("quantmod")
runApp("stockVis")
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
runApp('~/Documents/GitHub/2022modeling/WebApp')
